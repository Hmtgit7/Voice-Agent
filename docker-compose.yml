version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: voice-agent-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-interview_scheduler}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - voice-agent-network

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: voice-agent-backend
    restart: always
    depends_on:
      - postgres
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5000
      DB_HOST: postgres
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASS: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-interview_scheduler}
      DB_PORT: 5432
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
    ports:
      - "5000:5000"
    networks:
      - voice-agent-network

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000/api}
    container_name: voice-agent-frontend
    restart: always
    depends_on:
      - backend
    ports:
      - "3000:80"
    networks:
      - voice-agent-network

networks:
  voice-agent-network:
    driver: bridge

volumes:
  postgres_data: